# --------------------------------
# Special Case - application logs |
# --------------------------------
# Parse application logs based on msg format (mark unknown format with [unknown_msg_format] tag)
if([@type] == "LogMessage" and [@source][component] == "APP") {

  mutate {
    add_tag => [ "log" ]
  }

  ## ---- Format 1: JSON
  # check if it is JSON
  if [@message] =~ /^\s*{".*}\s*$/ {

    json {
      source => "@message"
      target => "log"
    }

    if !("_jsonparsefailure" in [tags]) {

      # conacat message and exception
      if ( [log][exception] ) {

        mutate {
          ## NOTE: keep line break and new line spacing (new line is inserted in logstash in such a way)
          replace => { "@message" => "%{[log][message]}
%{[log][exception]}" }
          remove_field => [ "[log][message]", "[log][exception]" ]
        }
      } else {

        mutate {
          rename => { "[log][message]" => "@message" }
        }
      }

      mutate {
        rename => { "[log][level]" => "@level" } # @level
      }

    } else {

      mutate {
        add_tag => [ "unknown_msg_format" ]
        remove_tag => ["_jsonparsefailure"]
      }
    }

  ## ---- Format 2: "[CONTAINER] .." (Tomcat logs)
 } else if [@message] =~ /^\s*\[CONTAINER\]/ {

    # Tomcat specific parsing (in accordance with https://github.com/cloudfoundry/java-buildpack-support/blob/master/tomcat-logging-support/src/main/java/com/gopivotal/cloudfoundry/tomcat/logging/CloudFoundryFormatter.java)
    grok {
      match => [ "@message", "(?m)(?<log_logger>\[CONTAINER\]%{SPACE}%{NOTSPACE})%{SPACE}%{LOGLEVEL:@level}%{SPACE}%{GREEDYDATA:@message}" ]
      overwrite => [ "@message", "@level" ]
      tag_on_failure => [ "unknown_msg_format" ]
    }
    mutate {
      rename => { "log_logger" => "[log][logger]" }
    }

  } else {

    ## ---- Format 3: Logback status logs
    grok {
      match => [ "@message", "%{TIME} \|\-%{LOGLEVEL:@level} in %{NOTSPACE:[log][logger]} - %{GREEDYDATA:@message}" ]
      overwrite => [ "@message", "@level" ]

      ## ---- Unknown Format: otherwise set with 'unknown_msg_format' tag
      tag_on_failure => [ "unknown_msg_format" ]
    }
  }

}
